# Claude 系统指令

## 项目信息
- 项目名称: nofx (加密货币交易系统)
- 技术栈: Go (后端), TypeScript/React (前端)
- 数据库: PostgreSQL + Redis
- 主要功能: 自动化交易、策略管理、风险控制

## 开发规范

### 1. 代码质量
- 保持代码简洁、可读
- 使用有意义的变量和函数命名
- 添加适当的注释和文档
- 遵循 Go 和 TypeScript 的最佳实践

### 2. 安全要求
- 严格检查所有用户输入
- 使用参数化查询防止 SQL 注入
- 敏感信息（API keys, 密码）必须加密存储
- 实施适当的访问控制

### 3. 性能考虑
- 数据库查询优化
- 合理使用缓存
- 避免内存泄漏
- 异步处理长时间运行的任务

### 4. 错误处理
- 提供有意义的错误信息
- 记录详细的错误日志
- 优雅地处理失败情况
- 避免暴露敏感信息

### 5. 测试要求
- 为新功能编写单元测试
- 测试覆盖率目标: 80%+
- 集成测试关键业务流程
- 性能测试关键路径

### 6. Bug 排查和修复流程 ⚠️ **重要**

#### 问题排查顺序 (严格按照此顺序)
1. **前端检查** - 检查 UI 组件、状态管理、API 调用、用户交互逻辑
2. **后端检查** - 检查 API 接口、业务逻辑、数据处理、服务间通信
3. **数据库检查** - 检查数据模型、查询语句、数据一致性、事务处理

#### 修复后验证流程 (必须执行)
1. **编译前端项目** - 确保前端代码无编译错误
2. **编译后端项目** - 确保后端代码无编译错误
3. **集成测试** - 前后端联调测试
4. **提交代码** - 只有在所有编译和测试通过后才能提交

**原则**: 从用户界面到数据存储，逐层排查；修复后必须验证完整链路正常工作。

## 项目特定的检查清单

在处理代码或请求时，请检查：

### Bug 排查检查清单
- [ ] 已按前端→后端→数据库顺序进行问题排查？
- [ ] 是否定位了问题的具体层级？
- [ ] 修复后是否已编译前端项目？
- [ ] 修复后是否已编译后端项目？
- [ ] 前后端联调测试是否通过？

### 通用检查清单
- [ ] 是否涉及敏感的 API keys 或交易数据？
- [ ] 是否需要数据库迁移？
- [ ] 是否影响现有的交易策略？
- [ ] 是否需要添加或更新测试？
- [ ] 是否需要更新 API 文档？
- [ ] 是否考虑了并发安全性？
- [ ] 是否有适当的错误处理？
- [ ] 是否符合项目的架构模式？

## 常用命令
```bash
# 后端开发
go mod tidy
go run .
go build

# 前端开发
cd frontend && npm install
cd frontend && npm run build
cd frontend && npm run dev

# 数据库
go run migrations/main.go up

# 测试
go test ./...
cd frontend && npm test

# 完整编译测试流程 (修复bug后必须执行)
echo "编译后端..." && go build
echo "编译前端..." && cd frontend && npm run build
echo "后端编译状态: $?" && echo "前端编译状态: $?"
```

## 注意事项
- 交易相关的代码需要格外小心，确保资金安全
- 修改 API 结构时需要考虑向后兼容性
- 部署前必须进行充分的测试
- 保持代码与项目整体架构一致